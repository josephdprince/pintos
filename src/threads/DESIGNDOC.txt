			+--------------------+
			|    CompSci 143A    |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Puloma Katiyar        <pkatiyar@uci.edu>
Joseph Prince         <jdprince@uci.edu>
Alexandra Zhang Jiang <azhangji@uci.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission or notes for the
>> TAs, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

sleeping_list keeps track of all the threads that are waiting
until x ticks has passed to be awaken and put into the ready queue	
static struct list sleeping_list


Added two struct variables to keep track of when to wake up a thread: 
int64_t start is the current cpu time when the thread is put to sleep
int64_t wait_time is the amount of ticks that the thread sleeps
struct thread
    {
    tid_t tid;                         
    enum thread_status status;          
    char name[16];                     
    uint8_t *stack;                     
    int priority;                       
    struct list_elem allelem;           
    int64_t start;			/* NEW */
    int64_t wait_time;			/* NEW */
    struct list_elem elem;              

#ifdef USERPROG
    uint32_t *pagedir;                  
#endif
    unsigned magic;                     
  };



---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep():
Interrupts are disabled, the current thread running
is pushed back to the end of the sleeping list, data needed to keep 
track of time is initialized and the thread is blocked.

schedule():
Everytime the schedule function is called in threads.c, the program
checks if there are sleeping threads. When enough ticks has 
passed for a thread, the program removes the thread from sleeping 
queue and unblocks it.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We did not use the timer interrupt handler.
All the checks are done in the schedule function in threads.c.




---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

We disabled the interrupts in timer_sleep() to prevent race conditions.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

We did not use a timer interrupt. Instead, we traverse through a queue of
sleeping threads and check if enough ticks has passed. 



---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This was the first design we considered. The implementation of the timer,
however, differed in every iteration, but we decided that using the CPU 
ticks would be the most efficient as the threads calls the schedule
function on every tick. Hence all the checks occur in the schedule
function. Although it is not good practice, in order to keep track of the 
CPU time, the most simple solution was to add more struct variables in threads.
In this design there is no explicit loop written to check if enough 
ticks has passed, the scheduler handles the job. 





			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added three struct variables to thread: waiting_lock, held_locks, and effectivePriority.
struct thread
  {
    tid_t tid;                          
    enum thread_status status;          
    char name[16];                      
    uint8_t *stack;                    
    
    struct lock *waiting_lock;          /* ---NEW: lock that thread is waiting for */
    struct list held_locks;             /* ---NEW: list of all locks that are held by thread */
    int priority;                       /* Priority. */
    int effectivePriority;              /* ---NEW: Priority after donation*/
    
    struct list_elem allelem;           
    int64_t start;
    int64_t wait_time;
    struct list_elem elem;             

#ifdef USERPROG
    uint32_t *pagedir;                 
#endif
    unsigned magic;                    
  };


Added two struct variables to lock struct: elem, and max_pri
struct lock 
  {
    struct thread *holder;      
    struct semaphore semaphore; 
    struct list_elem elem;      /* ---NEW: list element for a lock */
    int max_pri;                /* ---NEW: max priority across all the waiters*/
  };



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

A thread uses an "effectivePriority" integer to keep track of its new priority 
after donation. It also has a list of acquired locks and a priority
variable for the waiting block.

In a nested priority:
Thread H (priority 3) is waiting on a lock that M (priority 2) holds and 
M is waiting on a lock that L (priority 1) holds 
+-----+    +-----+    +-----+ 
| H:3 |--->| M:2 |--->| L:1 |
+-----+    +-----+    +-----+

The priority of the threads are inverted since H cannot execute until L releases 
the resources that H needs but thread L won't execute before H because it has a
lower priority. Then after priority donation, the effectivePriority is:
+-----+    +-----+    +-----+ 
| H:3 |--->| M:3 |--->| L:3 |
+-----+    +-----+    +-----+

In our code implementation:
When a thread wants to acquire a lock but fails, we check for a holder with 
the lock. The holder's lock is stored in waiting_lock so we can recursively
check for priority donation.




---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

When a thread is created, we yield the new thread so that the 
next_thread_to_run function can traverse the ready list and 
return the thread with the highest priority.


>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When the current thread cannot acquire a lock, we do a priority donation. 
We store the lock that the thread is waiting for and we go to the 
lock's holder and donate the highest priority between the current thread's
priority or the current thread's effectivePriority. If the holder has a lock 
held by another thread, then we repeat all the steps above to donate 
priority until there are no more waiting blocks.


>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

Given a lock from a "holder thread",
the lock is removed from its list of held_blocks. Then the effective 
priority of the holder is set to PRI_MIN because once it releases the 
resources that the higher-priority thread needs, it does not need the 
priority donation given by the higher-priority thread. We set it to
PRI_MIN so that the higher-priority thread can run.


---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?
A race in thread_set_priority can occur when two threads tries to
simultaneously set their priorities. We avoid this by turning off inturrupts


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We chose this design because it was a simple and understandable way to create
a priority scheduler. It is better than other designs that we considered because
it is intuitive and we do not change a threads real priority.





			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static struct list milf_lists[PRI_MAX + 1];

static int load_avg;

int ready_threads;

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    struct lock *waiting_lock;          /* lock that thread is waiting for */
    struct list held_locks;            /* list of all locks that are held by thread */
    int priority;                       /* Priority. */
    int effectivePriority;              /* Priority after donation*/
    struct list_elem allelem;           /* List element for all threads list. */
    int64_t start;
    int64_t wait_time;
    int nice;
    int recent_cpu;

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */
#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

We added a nice integer and recent_cpu integer to the thread and a load_avg global integer. These are needed to perform the calculations
for the mlfqs. the milf_lists list is used to hold all the lists in a mlfqs and the ready_threads counts the # of threads that are ready to run

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

No

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

The more code in the inturrupt handler will decrease performance

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

Advantages: straight-forward implementation
Disadvantages: not every test case passes

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

We did not abstract an implementation of the arithmetic for fixed-point math.
The arithmetic operations were translated into the respective equivalent
from the chart given in the projects documentation. 



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
